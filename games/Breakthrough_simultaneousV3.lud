// /!\ This game is not finished yet. It is a work in progress. /!\
//  As of now the player 2 eats player one if they choose to go on the same tile and a weird thing happen if player goes where the pawn of player two previously was before the simultaneous play.
// Because, most likely, the game is not really simultaneous but player one plays first then player two.

//"ReachWin" does not work with simultaneous games. Probably because of the confusion between players and their belonging regions.
(define "ReachWinSimultaneous" 
    (if ((!= #2 (difference #2 (sites Occupied by:#1)))  (result #1 Win)))
)

//"IsEnemyAt" does not work with simultaneous games. Probably because of the confusion between players.
(define "IsPlayerAt"
    (!= (who at:#2) #1)
)

//Had to use move instead of move Step because it is needed to separate the moves of the two players in simultaneous mode.
(define "MoveSimultaneousFirst" 
    (or {
        (move 
            (from (sites Occupied by:P1))
            (to (sites Direction from:(from) Forward distance:1) 
                if:(and 
                    (is Empty (to)) 
                    ("MoveOnLeft" (to) (from))
                )
            )
            P1
            (then ("FollowingP1Move"))
        )
        (move 
            (from (sites Occupied by:P1))
            (to (sites Direction from:(from) FL distance:1)
                if:(and
                        (or 
                            (is Empty (to)) 
                            ("IsPlayerAt" P1 (to))
                        )
                        ("MoveOnLeft" (to) (from))
                    )
                (apply (remove (to)))
            )
            P1
            (then ("FollowingP1Move"))
        )
        (move 
            (from (sites Occupied by:P1))
            (to (sites Direction from:(from) FR distance:1)
                if:(and
                        (or 
                            (is Empty (to)) 
                            ("IsPlayerAt" P1 (to))
                        )
                        ("MoveOnLeft" (to) (from))
                    )
                (apply (remove (to)))
            )
            P1
            (then ("FollowingP1Move"))
        )
    })
    
)

(define "MoveSimultaneousSecond" 
    (or {
        (move 
            (from (sites Occupied by:P2))
            (to (sites Direction from:(from) Forward distance:1) 
                if:(and 
                    (is Empty (to)) 
                    ("MoveOnRight" (to) (from))
                )
                (apply (if ("IsInvalidSimultaneously" (to)) 
                    (pass)
                ))
            )
            P2
            (then ("ReplayOnLeft" (last From) (last To)))
        )
        (move 
            (from (sites Occupied by:P2))
            (to (sites Direction from:(from) FL distance:1)
                if:(and
                        (or 
                            (is Empty (to)) 
                            ("IsPlayerAt" P2 (to))
                        )
                        ("MoveOnRight" (to) (from))
                    )
                (apply (if ("IsInvalidSimultaneously" (to)) (pass) (remove (to))))
            )
            P2
            (then ("ReplayOnLeft" (last From) (last To)))
        )
        (move 
            (from (sites Occupied by:P2))
            (to (sites Direction from:(from) FR distance:1)
                if:(and
                        (or 
                            (is Empty (to)) 
                            ("IsPlayerAt" P2 (to))
                        )
                        ("MoveOnRight" (to) (from))
                    )
                (apply (if ("IsInvalidSimultaneously" (to)) (pass) (remove (to))))
            )
            P2
            (then ("ReplayOnLeft" (last From) (last To)))
        )
    })
    
)

(define "IsOnLeft" 
    (< (- #1 (* (/ (#1) 16) 16)) 8)
)

(define "MoveOnLeft"
    (and ("IsOnLeft" #1) ("IsOnLeft" #2))
)

(define "IsOnRight" 
    (>= (- #1 (* (/ (#1) 16) 16)) 8)
)

(define "MoveOnRight"
    (and ("IsOnRight" #1) ("IsOnRight" #2))
)

(define "ReplayOnLeft"
    (fromTo (from (- #1 8)) (to (- #2 8)))
)

(define "ReplayOnRight"
    (fromTo (from (+ 8 #1)) (to (+ 8 #2)))
)

(define "ReplayOnRightConfirmed"
    (and {
        ("ReplayOnRight" ("FirstSiteToInt" (sites State 1)) ("FirstSiteToInt" (sites State 2)))
        (forEach Value (array (sites State 1)) (set State at:(value) 0))
        (forEach Value (array (sites State 2)) (set State at:(value) 0))
    })
)

(define "FirstSiteToInt" 
    (arrayValue (array #1) index:0)
)

(define "FollowingP1Move" 
    (and {
        (set State at:(last From) 1)
        (set State at:(last To) 2)
        ("ReplayOnRightConfirmed")
    })
)

// #1 = to
(define "IsInvalidSimultaneously"
    (and ("IsEnemyAt" (- #1 8)) (= (#1) ("FirstSiteToInt" (sites State 2))))
)

//------------------------------------------------------------------------------

(game "Breakthrough_simultaneous" 
    ("TwoPlayersNorthSouth") 
    (equipment { 
        (board (square {8 16 8 16}))
        (piece "Pawn" Each )
        (regions P1 (sites Top))
        (regions P2 (sites Bottom))
    }) 
    (rules 
        (start { 
            (place "Pawn1" (expand (sites Bottom)))
            (place "Pawn2" (expand (sites Top)))
            (set Hidden (forEach (sites Board) if:("IsOnLeft" (site))) to:P2)
            (set Hidden (forEach (sites Board) if:("IsOnRight" (site))) to:P1)
        })
        (play 
            (if (is Mover P1)
                ("MoveSimultaneousFirst")
                ("MoveSimultaneousSecond")
            )
        )

        
        (end {
            ("ReachWinSimultaneous" P1 (sites Top))
            ("ReachWinSimultaneous" P2 (sites Bottom))
        })
    )
)

//------------------------------------------------------------------------------

(option "Board" <Tiling> args:{ <type> }
    {
    (item "Square" <square> "The board is tiling by square.")* 
    (item "Hexagon" <hex> "The board is tiling by hexagon.") 
})

(option "Board Size" <Board> args:{ <size> }
    {
    (item "4x4" <4> "The game is played on a 4x4 board.") 
    (item "5x5" <5> "The game is played on a 5x5 board.") 
    (item "6x6" <6> "The game is played on a 6x6 board.") 
    (item "7x7" <7> "The game is played on a 7x7 board.") 
    (item "8x8" <8> "The game is played on a 8x8 board.")* 
    (item "9x9" <9> "The game is played on a 9x9 board.") 
    (item "10x10" <10> "The game is played on a 10x10 board.") 
    (item "11x11" <11> "The game is played on a 11x11 board.") 
    (item "12x12" <12> "The game is played on a 12x12 board.") 
})

//------------------------------------------------------------------------------

(metadata
    
    (info
        {
        (description "Invented in 2000 by Dan Troyka, Breakthrough is a Chess variant played only with pawns. The game here is a simultaneous version of Breakthrough")
        (rules "Played on an 8x8 board with a double contingent of chess pawns. Pieces move forward one orthogonally or diagonally. Pieces can capture by moving diagonally. The first player to reach the opponent's edge of the board wins. A player also wins by default if they capture all of the opponent's pieces.")
        (source "<a href=\"https://en.wikipedia.org/wiki/Breakthrough_(board_game)\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />Wikipedia</a>")
        (id "73")
        (version "1.0.0")
        (classification "board/race/reach")
        (publisher "LIP6")
        (credit "Aymeric Behaegel")
        (date "2023")
        }
    )
    
    (graphics {
        (board Style Chess)
    })
    
    (ai 
        "Breakthrough_ai"
    )
    
)